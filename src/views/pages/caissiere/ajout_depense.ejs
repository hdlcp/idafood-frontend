<!-- src/views/pages/ajout_depense.ejs -->
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <title>Dépense - IDA Food</title>
  </head>

  <body class="bg-[#f2f2f2] min-h-screen flex flex-col">
    <!-- HEADER -->
    <header>
      <%- include('../components/header') %>
      <%- include('../components/menu') %>
    </header>

    <!-- CONTENU PRINCIPAL -->

    <main class="flex-1 p-4 flex flex-col justify-center items-center text-center">
      <p id="empty-message" class="text-gray-500 mb-8 text-sm">Aucun article sélectionné</p>
      <!-- Liste des dépenses ajoutées -->
    <div id="depense-liste" class="w-full max-w-md space-y-2 mb-6"></div>

    </main>

    <!-- FOOTER -->
    <footer class="bg-white p-4 rounded-t-xl shadow-md flex items-center justify-between">
      <p class="text-lg font-bold">Total : <span id="total">0</span> FCFA</p>
      <div class="flex items-center space-x-2">
        <button id="open-depense-btn">
          <i class="fa fa-plus-square text-4xl text-yellow-600" aria-hidden="true"></i>
        </button>
      </div>
    </footer>

    <!-- POPUP DÉPENSE -->
    <div id="popup-depense" class="fixed bottom-0 left-0 w-full bg-white rounded-t-3xl shadow-lg p-5 z-50 transform translate-y-full transition-transform duration-300">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-bold">Ajouter une dépense</h2>
        <button id="close-popup" class="text-black text-xl font-bold">&times;</button>
      </div>
      <form id="form-depense">
        <input 
          type="text" 
          placeholder="Nom de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        <input 
          type="number" 
          placeholder="Prix de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        <input 
          type="number" 
          placeholder="Nombre de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        
        <button 
          type="submit" 
          class="w-40 bg-yellow-600 text-white font-semibold py-2 rounded-full mx-auto flex justify-center mt-4"
        >
          Ajouter
        </button>
      </form>
    </div>

    <!-- SCRIPT -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const popup = document.getElementById("popup-depense");
        const openBtn = document.getElementById("open-depense-btn");
        const closeBtn = document.getElementById("close-popup");
        const form = document.getElementById("form-depense");
        const depenseListe = document.getElementById("depense-liste");
        const totalSpan = document.getElementById("total");
        const emptyMessage = document.getElementById("empty-message");
      
        let total = 0;
        let depenses = [];
      
        // Créer un toast pour les notifications
        function showToast(message, isError = false) {
          // Supprimer les toasts existants
          const oldToasts = document.querySelectorAll('.toast');
          oldToasts.forEach(toast => toast.remove());
          
          // Créer le nouveau toast
          const toast = document.createElement('div');
          toast.className = `fixed top-20 left-1/2 transform -translate-x-1/2 z-50 px-4 py-2 rounded-lg shadow-lg ${isError ? 'bg-red-500' : 'bg-green-500'} text-white`;
          toast.textContent = message;
          document.body.appendChild(toast);
          
          // Supprimer après 3 secondes
          setTimeout(() => {
            toast.remove();
          }, 3000);
        }
      
        // Charger les dépenses existantes
        async function chargerDepenses() {
          try {
            const response = await fetch('/api/purchase-list-proxy');
            const data = await response.json();
            
            if (data.success || Array.isArray(data.data)) { // Modifié pour accepter même si success est false
              // Réinitialiser les données
              depenses = data.data;
              total = 0;
              depenseListe.innerHTML = '';
              
              // Afficher les dépenses
              if (depenses.length > 0) {
                emptyMessage.classList.add("hidden");
                depenses.forEach(depense => {
                  ajouterCarteDependse(depense);
                  total += depense.total;
                });
                totalSpan.textContent = total;
              } else {
                emptyMessage.classList.remove("hidden");
                totalSpan.textContent = 0;
              }
            } else {
              showToast(data.message || "Erreur lors du chargement des dépenses", true);
            }
          } catch (error) {
            console.error('Erreur:', error);
            showToast("Erreur de connexion au serveur", true);
          }
        }
      
        // Ajouter une carte de dépense à l'interface
        function ajouterCarteDependse(depense) {
          const carte = document.createElement("div");
          carte.className = "bg-white p-3 rounded-xl shadow flex justify-between items-center";
          carte.dataset.id = depense.id;
      
          carte.innerHTML = `
            <div class="text-left">
              <p class="font-bold">${depense.nom_produit}</p>
              <p class="text-sm text-gray-600">${depense.prix_unitaire} FCFA</p>
            </div>
            <div class="flex items-center space-x-4">
              <p class="font-bold">${depense.quantite}</p>
              <button class="text-red-500 font-bold text-xl btn-supprimer">&times;</button>
            </div>
          `;
      
          // Gestion de la suppression
          carte.querySelector(".btn-supprimer").addEventListener("click", async () => {
            try {
              const response = await fetch(`/api/purchase-delete-proxy/${depense.id}`, {
                method: 'DELETE'
              });
              const data = await response.json();
              
              if (data.success) {
                // Au lieu de supprimer seulement un élément, on recharge toute la liste
                chargerDepenses();
                showToast("Dépense supprimée avec succès");
              } else {
                showToast(data.message || "Erreur lors de la suppression", true);
              }
            } catch (error) {
              console.error('Erreur:', error);
              showToast("Erreur de connexion au serveur", true);
            }
          });
      
          depenseListe.appendChild(carte);
        }
      
        // Ouvrir le popup
        openBtn.addEventListener("click", () => {
          console.log("OUVERTURE DU POPUP !");
          popup.classList.remove("translate-y-full");
        });
      
        // Fermer le popup
        closeBtn.addEventListener("click", () => {
          popup.classList.add("translate-y-full");
        });
      
        // Soumettre le formulaire
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
      
          const nomProduit = form.elements[0].value;
          const prixUnitaire = parseInt(form.elements[1].value);
          const quantite = parseInt(form.elements[2].value);
      
          if (!nomProduit || isNaN(prixUnitaire) || isNaN(quantite)) {
            showToast("Veuillez remplir tous les champs correctement", true);
            return;
          }
      
          // Préparer les données pour l'API
          const depenseData = {
            nom_produit: nomProduit,
            prix_unitaire: prixUnitaire,
            quantite: quantite
          };
      
          try {
            const response = await fetch('/api/purchase-create-proxy', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(depenseData)
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Au lieu d'ajouter manuellement la nouvelle dépense à l'UI,
              // on recharge toutes les dépenses pour s'assurer d'avoir les données à jour
              chargerDepenses();
              
              // Réinitialiser le formulaire et fermer le popup
              form.reset();
              popup.classList.add("translate-y-full");
              
              showToast("Dépense ajoutée avec succès");
            } else {
              showToast(data.message || "Erreur lors de l'ajout de la dépense", true);
            }
          } catch (error) {
            console.error('Erreur:', error);
            showToast("Erreur de connexion au serveur", true);
          }
        });
      
        // Charger les dépenses au chargement de la page
        chargerDepenses();
      });
    </script>
    <script src="/js/auth-checker.js"></script>  
  </body>
</html>
