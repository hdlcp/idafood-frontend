<!-- src/views/pages/ajout_depense.ejs -->
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <title>Dépense - IDA Food</title>
  </head>

  <body class="bg-[#f2f2f2] min-h-screen flex flex-col">
    <!-- HEADER -->
    <header>
      <%- include('../components/header') %>
      <%- include('../components/menu') %>
    </header>

    <!-- CONTENU PRINCIPAL -->
    <main class="flex-1 p-4 flex flex-col justify-center items-center text-center">
      <!-- Indicateur de chargement -->
      <div id="loading" class="bg-white p-4 rounded-xl shadow text-center mb-4 w-full max-w-md hidden">
        <p class="text-gray-700">Chargement en cours...</p>
      </div>

      <!-- Messages d'alerte -->
      <div id="alert" class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-sm mb-4 w-full max-w-md hidden">
        <div class="flex items-center">
          <div class="py-1">
            <svg class="h-6 w-6 text-green-500 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <div>
            <p id="alert-message" class="font-bold"></p>
          </div>
        </div>
      </div>

      <!-- Message d'erreur -->
      <div id="error-alert" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-sm mb-4 w-full max-w-md hidden">
        <div class="flex items-center">
          <div class="py-1">
            <svg class="h-6 w-6 text-red-500 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </div>
          <div>
            <p id="error-message" class="font-bold"></p>
          </div>
        </div>
      </div>
      
      <p id="empty-message" class="text-gray-500 mb-8 text-sm">Aucun article sélectionné</p>
      
      <!-- Liste des dépenses ajoutées -->
      <div id="depense-liste" class="w-full max-w-md space-y-2 mb-6"></div>
    </main>

    <!-- FOOTER -->
    <footer class="bg-white p-4 rounded-t-xl shadow-md flex items-center justify-between">
      <p class="text-lg font-bold">Total : <span id="total">0</span> FCFA</p>
      <div class="flex items-center space-x-2">
        <button id="open-depense-btn">
          <i class="fa fa-plus-square text-4xl text-yellow-600" aria-hidden="true"></i>
        </button>
      </div>
    </footer>

    <!-- POPUP DÉPENSE -->
    <div id="popup-depense" class="fixed bottom-0 left-0 w-full bg-white rounded-t-3xl shadow-lg p-5 z-50 transform translate-y-full transition-transform duration-300">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-lg font-bold">Ajouter une dépense</h2>
        <button id="close-popup" class="text-black text-xl font-bold">&times;</button>
      </div>
      <form id="form-depense">
        <input 
          type="text" 
          placeholder="Nom de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        <input 
          type="number" 
          placeholder="Prix de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        <input 
          type="number" 
          placeholder="Nombre de la dépense" 
          class="w-full p-2 mb-3 rounded-full bg-yellow-600/80 text-white placeholder-white"
          required
        >
        
        <button 
          type="submit" 
          class="w-40 bg-yellow-600 text-white font-semibold py-2 rounded-full mx-auto flex justify-center mt-4"
        >
          Ajouter
        </button>
      </form>
    </div>

    <!-- SCRIPT -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const popup = document.getElementById("popup-depense");
        const openBtn = document.getElementById("open-depense-btn");
        const closeBtn = document.getElementById("close-popup");
        const form = document.getElementById("form-depense");
        const depenseListe = document.getElementById("depense-liste");
        const totalSpan = document.getElementById("total");
        const emptyMessage = document.getElementById("empty-message");
        const loadingElement = document.getElementById("loading");
        const alertElement = document.getElementById("alert");
        const errorAlertElement = document.getElementById("error-alert");
        const alertMessageElement = document.getElementById("alert-message");
        const errorMessageElement = document.getElementById("error-message");
    
        let total = 0;
        let depenses = [];
    
        // Fonctions de gestion des alertes
        function showAlert(message, isError = false) {
          // Masquer les deux alertes d'abord
          alertElement.classList.add("hidden");
          errorAlertElement.classList.add("hidden");
          
          // Afficher l'alerte appropriée
          if (isError) {
            errorMessageElement.textContent = message;
            errorAlertElement.classList.remove("hidden");
          } else {
            alertMessageElement.textContent = message;
            alertElement.classList.remove("hidden");
          }
          
          // Cacher l'alerte après 5 secondes
          setTimeout(() => {
            if (isError) {
              errorAlertElement.classList.add("hidden");
            } else {
              alertElement.classList.add("hidden");
            }
          }, 5000);
        }
    
        // Fonction pour afficher/masquer l'indicateur de chargement
        function showLoading(visible) {
          if (visible) {
            loadingElement.classList.remove("hidden");
          } else {
            loadingElement.classList.add("hidden");
          }
        }
    
        // Charger les dépenses existantes
        async function chargerDepenses() {
          showLoading(true);
          try {
            const response = await fetch('/api/purchase-list-proxy');
            const data = await response.json();
            
            if (Array.isArray(data.data)) {
              // Réinitialiser les données
              depenses = data.data;
              total = 0;
              depenseListe.innerHTML = '';
              
              // Afficher les dépenses
              if (depenses.length > 0) {
                emptyMessage.classList.add("hidden");
                depenses.forEach(depense => {
                  ajouterCarteDependse(depense);
                  total += depense.total;
                });
                totalSpan.textContent = total;
              } else {
                emptyMessage.classList.remove("hidden");
                totalSpan.textContent = 0;
              }
              
              if (!data.success) {
                // Si success est false mais qu'on a quand même des données
                showAlert(data.message || "Les dépenses ont été chargées avec des avertissements", true);
              }
            } else {
              showAlert(data.message || "Erreur lors du chargement des dépenses", true);
              emptyMessage.classList.remove("hidden");
            }
          } catch (error) {
            console.error('Erreur:', error);
            showAlert("Erreur de connexion au serveur", true);
            emptyMessage.classList.remove("hidden");
          } finally {
            showLoading(false);
          }
        }
    
        // Ajouter une carte de dépense à l'interface
        function ajouterCarteDependse(depense) {
          const carte = document.createElement("div");
          carte.className = "bg-white p-3 rounded-xl shadow flex justify-between items-center";
          carte.dataset.id = depense.id;
    
          carte.innerHTML = `
            <div class="text-left">
              <p class="font-bold">${depense.nom_produit}</p>
              <p class="text-sm text-gray-600">${depense.prix_unitaire} FCFA</p>
            </div>
            <div class="flex items-center space-x-4">
              <p class="font-bold">${depense.quantite}</p>
              <button class="text-red-500 font-bold text-xl btn-supprimer">&times;</button>
            </div>
          `;
    
          // Gestion de la suppression
          carte.querySelector(".btn-supprimer").addEventListener("click", async () => {
            if (confirm('Voulez-vous vraiment supprimer cette dépense ?')) {
              showLoading(true);
              try {
                const response = await fetch(`/api/purchase-delete-proxy/${depense.id}`, {
                  method: 'DELETE'
                });
                const data = await response.json();
                
                if (data.success) {
                  // Recharger toute la liste
                  chargerDepenses();
                  showAlert("Dépense supprimée avec succès");
                } else {
                  showAlert(data.message || "Erreur lors de la suppression", true);
                }
              } catch (error) {
                console.error('Erreur:', error);
                showAlert("Erreur de connexion au serveur", true);
              } finally {
                showLoading(false);
              }
            }
          });
    
          depenseListe.appendChild(carte);
        }
    
        // Ouvrir le popup
        openBtn.addEventListener("click", () => {
          popup.classList.remove("translate-y-full");
        });
    
        // Fermer le popup
        closeBtn.addEventListener("click", () => {
          popup.classList.add("translate-y-full");
        });
    
        // Soumettre le formulaire
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          showLoading(true);
    
          const nomProduit = form.elements[0].value;
          const prixUnitaire = parseInt(form.elements[1].value);
          const quantite = parseInt(form.elements[2].value);
    
          if (!nomProduit || isNaN(prixUnitaire) || isNaN(quantite)) {
            showAlert("Veuillez remplir tous les champs correctement", true);
            showLoading(false);
            return;
          }
    
          // Préparer les données pour l'API
          const depenseData = {
            nom_produit: nomProduit,
            prix_unitaire: prixUnitaire,
            quantite: quantite
          };
    
          try {
            const response = await fetch('/api/purchase-create-proxy', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(depenseData)
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Recharger toutes les dépenses pour s'assurer d'avoir les données à jour
              chargerDepenses();
              
              // Réinitialiser le formulaire et fermer le popup
              form.reset();
              popup.classList.add("translate-y-full");
              
              showAlert("Dépense ajoutée avec succès");
            } else {
              showAlert(data.message || "Erreur lors de l'ajout de la dépense", true);
            }
          } catch (error) {
            console.error('Erreur:', error);
            showAlert("Erreur de connexion au serveur", true);
          } finally {
            showLoading(false);
          }
        });
    
        // Charger les dépenses au chargement de la page
        chargerDepenses();
      });
    </script>
    <script src="/js/auth-checker.js"></script>  
  </body>
</html>