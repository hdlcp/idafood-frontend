<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/your-kit-id.js" crossorigin="anonymous"></script>
    <title>Nouvelle Commande - IDA Food</title>
    <style>
      .scrollbar-hide::-webkit-scrollbar {
        display: none;
      }
      .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
    </style>

  </head>
  <body class="bg-[#f2f2f2] min-h-screen flex flex-col">
        <!-- Header -->
        <header>
          <%- include('../components/header') %>
          <%- include('../components/menu') %>
        </header>
       
   <!-- CONTENU PRINCIPAL -->
   <main class="flex-1 p-4 flex flex-col justify-center items-center text-center">
    <p id="empty-message" class="text-gray-500 mb-8 text-sm">Aucun article s√©lectionn√©</p>

     <!-- üü° ICI : Zone d'affichage des articles ajout√©s -->
  <div id="commande" class="w-full max-w-md space-y-2 mb-6"></div>

    <!-- Input motif -->
    <textarea 
      id="motif" 
      placeholder="Motif de la commande"
      class="w-full max-w-md p-3 rounded-xl shadow bg-white text-sm resize-none"
      rows="3"
    ></textarea>
  </main>

  <!-- FOOTER -->
  <footer class="bg-white p-4 rounded-t-xl shadow-md flex items-center justify-between">
    <p class="text-lg font-bold">Total : <span id="total">0</span> FCFA</p>
    <div class="flex items-center space-x-2">
      <button
        id="submit-btn"
        class="bg-[#9B9BFF] text-white font-bold text-sm px-4 py-2 rounded-xl disabled:opacity-50"
        disabled
      >
        Passer la commande
      </button>
      <div id="confirmation-message" class="mt-2 text-green-600 text-sm font-semibold"></div>
      <button onclick="toggleMenu()">
        <i class="fa fa-plus-circle text-4xl text-ida-gold" aria-hidden="true"></i>
      </button>
    </div>
  </footer>

  <!-- MENU FLOTTANT -->
  <div id="menu-flottant" class="fixed bottom-0 left-0 w-full max-h-[70%] bg-white shadow-xl rounded-t-2xl transform translate-y-full transition-transform duration-300 z-50">
    <div class="flex items-center justify-between p-4 border-b">
      <h2 class="text-lg font-semibold">Menu</h2>
      <button onclick="toggleMenu()" class="text-gray-600 text-xl">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <!-- Barre de recherche -->
    <div class="px-4 py-2">
      <input id="recherche" type="text" placeholder="Rechercher..." class="w-full p-2 rounded-md border text-sm focus:outline-none" />
    </div>

    <!-- Filtres -->
    <div id="filters" class="flex px-4 py-2 space-x-2 text-sm font-semibold overflow-x-auto scrollbar-hide">
      <button data-categorie="Petit D√©jeuner" class="px-3 py-1 bg-[#F1C96F] text-white rounded-full whitespace-nowrap">Petit D√©jeuner</button>
      <button data-categorie="Desserts" class="px-3 py-1 bg-gray-200 rounded-full whitespace-nowrap">Desserts</button>
      <button data-categorie="Jus Bio" class="px-3 py-1 bg-gray-200 rounded-full whitespace-nowrap">Jus Bio</button>
      <button data-categorie="boissons" class="px-3 py-1 bg-gray-200 rounded-full whitespace-nowrap">Boissons</button>
    </div>

    <!-- Liste des plats -->
    <div id="liste-plats" class="overflow-y-auto max-h-64 px-4 scrollbar-hide">
      <!-- Plats g√©n√©r√©s dynamiquement ici -->
    </div>
  </div>

  <!-- SCRIPTS -->
  <script src="https://kit.fontawesome.com/83eaa4b7f0.js" crossorigin="anonymous"></script>

  <script>
    // Initialisation des produits comme un objet vide pour chaque cat√©gorie
    let produits = {
      "Petit D√©jeuner": [],
      "Desserts": [],
      "Jus Bio": [],
      "boissons": []
    };

    let categorieActive = "Petit D√©jeuner"; // cat√©gorie par d√©faut
    const panier = [];

    // Fonction pour r√©cup√©rer le menu depuis l'API
    async function fetchMenu() {
      try {
        // Afficher un indicateur de chargement
        document.getElementById("liste-plats").innerHTML = '<p class="text-center py-4">Chargement du menu...</p>';
        
        const response = await fetch('/api/menu-proxy');
        if (!response.ok) {
          throw new Error('Erreur lors de la r√©cup√©ration du menu');
        }
        
        const data = await response.json();
        
        // Traiter les donn√©es du menu et les organiser par cat√©gorie
        if (data.success && data.data) {
          // R√©initialiser les produits
          produits = {
            "Petit D√©jeuner": [],
            "Desserts": [],
            "Jus Bio": [],
            "boissons": []
          };
          
          // Organiser les produits par cat√©gorie
          data.data.forEach(categorie => {
            const nomCategorie = categorie.nom;
            
            // V√©rifier si la cat√©gorie existe dans notre objet produits
            if (produits.hasOwnProperty(nomCategorie)) {
              produits[nomCategorie] = categorie.composants.map(item => ({
                nom: item.nom,
                prix: item.prix,
                id: item.id
              }));
            }
          });
          
          // Afficher la cat√©gorie active
          renderPlats(categorieActive);
          highlightFilter(categorieActive);
        } else {
          throw new Error(data.message || 'Erreur lors de la r√©cup√©ration du menu');
        }
      } catch (error) {
        console.error('Erreur menu:', error);
        document.getElementById("liste-plats").innerHTML = 
          `<p class="text-red-500 text-center py-4">Impossible de charger le menu. ${error.message}</p>`;
      }
    }

    function toggleMenu() {
      const menu = document.getElementById("menu-flottant");
      menu.classList.toggle("translate-y-full");
      renderPlats(categorieActive);
      highlightFilter(categorieActive);
    }

    function renderPlats(categorie) {
      const container = document.getElementById("liste-plats");
      const searchTerm = document.getElementById("recherche").value.toLowerCase();
      
      // V√©rifier si la cat√©gorie existe dans nos produits
      if (!produits[categorie] || !Array.isArray(produits[categorie])) {
        container.innerHTML = `<p class="text-gray-400 text-sm text-center py-4">Cat√©gorie non disponible</p>`;
        return;
      }
      
      const liste = produits[categorie].filter(p => p.nom.toLowerCase().includes(searchTerm));
      container.innerHTML = "";

      if (liste.length === 0) {
        container.innerHTML = `<p class="text-gray-400 text-sm text-center py-4">Aucun plat trouv√©</p>`;
        return;
      }

      liste.forEach(produit => {
        const platHTML = `
          <div class="flex justify-between items-center bg-[#E7E5FD] rounded-xl px-4 py-3 mb-2">
            <div>
              <p class="font-semibold text-sm">${produit.nom}</p>
              <p class="text-xs">${produit.prix} FCFA</p>
            </div>
            <button 
              class="bg-[#c3831e] text-white text-lg w-8 h-8 rounded-full flex items-center justify-center add-plat-btn"
              data-nom="${produit.nom}" 
              data-prix="${produit.prix}"
              data-id="${produit.id}"
            >
              <i class="fas fa-plus"></i>
            </button>
          </div>
        `;
        container.insertAdjacentHTML("beforeend", platHTML);
      });

      // Ajouter les articles √† la commande
      container.querySelectorAll('.add-plat-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const nom = btn.getAttribute('data-nom');
          const prix = parseInt(btn.getAttribute('data-prix'));
          const id = btn.getAttribute('data-id');

          ajouterArticle(nom, prix, id);
        });
      });
    }

    function ajouterArticle(nom, prix, id) {
      // V√©rifier si l'article existe d√©j√† dans le panier
      const existant = panier.find(item => item.nom === nom);
      
      if (existant) {
        existant.quantite++;
      } else {
        panier.push({ nom, prix, quantite: 1, id });
      }

      document.getElementById("empty-message").style.display = "none";
      afficherCommande();
      updateTotal();
    }

    function updateTotal() {
      const total = panier.reduce((sum, item) => sum + item.prix * item.quantite, 0);
      const btn = document.getElementById("submit-btn");

      document.getElementById("total").innerText = total;

      if (total === 0) {
        btn.disabled = true;
        btn.classList.remove("bg-[#070B7F]");
        btn.classList.add("bg-[#9B9BFF]");
      } else {
        btn.disabled = false;
        btn.classList.remove("bg-[#9B9BFF]");
        btn.classList.add("bg-[#070B7F]");
      }
    }

    function highlightFilter(activeCat) {
      document.querySelectorAll('#filters button').forEach(btn => {
        const cat = btn.getAttribute('data-categorie');
        if (cat === activeCat) {
          btn.classList.add('bg-[#F1C96F]', 'text-white');
          btn.classList.remove('bg-gray-200');
        } else {
          btn.classList.remove('bg-[#F1C96F]', 'text-white');
          btn.classList.add('bg-gray-200');
        }
      });
    }

    function afficherCommande() {
      const commandeContainer = document.getElementById("commande");
      commandeContainer.innerHTML = "";

      panier.forEach((item, index) => {
        const articleHTML = `
          <div class="bg-white p-3 rounded-xl shadow flex items-center justify-between mb-2">
            <div>
              <p class="font-bold text-sm">${item.nom}</p>
              <p class="text-xs text-gray-600">${item.prix} FCFA</p>
            </div>
            <div class="flex items-center gap-2">
              <button class="text-sm bg-gray-200 px-2 rounded font-bold text-lg" onclick="modifierQuantite(${index}, -1)">-</button>
              <span class="text-sm">${item.quantite}</span>
              <button class="text-sm bg-gray-200 px-2 rounded font-bold text-lg" onclick="modifierQuantite(${index}, 1)">+</button>
              <button class="text-red-500 text-xs ml-2" onclick="supprimerArticle(${index})">üóë</button>
            </div>
          </div>
        `;
        commandeContainer.insertAdjacentHTML("beforeend", articleHTML);
      });
    }

    function modifierQuantite(index, changement) {
      panier[index].quantite += changement;
      if (panier[index].quantite <= 0) {
        panier.splice(index, 1);
      }
      afficherCommande();
      updateTotal();
      
      if (panier.length === 0) {
        document.getElementById("empty-message").style.display = "block";
      }
    }

    function supprimerArticle(index) {
      panier.splice(index, 1);
      afficherCommande();
      updateTotal();
      
      if (panier.length === 0) {
        document.getElementById("empty-message").style.display = "block";
      }
    }

    // Fonction pour afficher les messages
    function afficherMessage(message, type) {
      const container = document.getElementById("confirmation-message");
      container.innerHTML = "";
      
      const messageDiv = document.createElement("div");
      messageDiv.innerText = message;
      messageDiv.className = type === "success" 
        ? "mt-2 text-green-600 font-semibold text-sm whitespace-nowrap" 
        : "mt-2 text-red-600 font-semibold text-sm whitespace-nowrap";
      
      container.appendChild(messageDiv);
      
      // Supprimer le message apr√®s 5 secondes
      setTimeout(() => {
        container.innerHTML = "";
      }, 5000);
    }

    // Fonction pour envoyer une commande
    async function envoyerCommande() {
      try {
        const motif = document.getElementById("motif").value.trim();
        
        // Pr√©parer les donn√©es pour l'API selon le format attendu
        const commandeData = {
          motif: motif,
          items: panier.map(item => ({
            plat_id: parseInt(item.id), // Convertir en nombre entier pour s'assurer que c'est du bon format
            quantite: item.quantite
          }))
        };
        
        // Afficher un indicateur de chargement
        const submitBtn = document.getElementById("submit-btn");
        const originalText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i> Envoi...`;
        
        // Envoyer la commande
        const response = await fetch('/api/order-proxy', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(commandeData)
        });
        
        const data = await response.json();
        
        if (data.success) {
          // R√©initialisation
          panier.length = 0;
          document.getElementById("commande").innerHTML = "";
          document.getElementById("motif").value = "";
          document.getElementById("empty-message").style.display = "block";
          updateTotal();
          
          // Afficher un message de succ√®s
          afficherMessage("Commande envoy√©e avec succ√®s !", "success");
        } else {
          // Afficher un message d'erreur
          afficherMessage(data.message || "Erreur lors de l'envoi de la commande", "error");
        }
      } catch (error) {
        console.error('Erreur commande:', error);
        afficherMessage("Erreur de connexion au serveur", "error");
      } finally {
        // Restaurer le bouton
        const submitBtn = document.getElementById("submit-btn");
        submitBtn.disabled = false;
        submitBtn.innerHTML = "Passer la commande";
      }
    }

    // Initialisation - ex√©cut√© au chargement de la page
    document.addEventListener("DOMContentLoaded", () => {
      // Charger le menu au chargement de la page
      fetchMenu();
      
      // Gestionnaire d'√©v√©nement pour le bouton de soumission
      document.getElementById("submit-btn").addEventListener("click", envoyerCommande);
      
      // Clic sur boutons de filtre
      document.querySelectorAll('#filters button').forEach(btn => {
        btn.addEventListener("click", () => {
          const cat = btn.getAttribute("data-categorie");
          categorieActive = cat;
          renderPlats(categorieActive);
          highlightFilter(categorieActive);
        });
      });
      
      // Recherche en direct
      document.getElementById("recherche").addEventListener("input", () => {
        renderPlats(categorieActive);
      });
    });
  </script>
</body>
</html>