<!-- point_de_journee.ejs -->
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.tailwindcss.com"></script>
  <title>Point de la journée - IDA Food</title>
</head>
<body class="bg-[#f2f2f2] min-h-screen flex flex-col">

  <!-- HEADER -->
  <header>
    <%- include('../components/header') %>
    <%- include('../components/menu') %>
  </header>

  <main class="flex-grow p-4 space-y-6">
    <!-- Formulaire de filtre -->
    <form id="filtre-form" class="bg-white p-4 rounded-xl shadow space-y-4">
      <div>
        <label class="block font-semibold mb-1 text-[#c3831e]">Filtrer par :</label>
        <select id="filtre" class="w-full p-2 border rounded">
          <option value="jour">Un jour</option>
          <option value="mois">Un mois</option>
          <option value="periode">Période personnalisée</option>
        </select>
      </div>

      <div id="champ-jour" class="hidden">
        <label class="block mb-1 text-sm">Jour :</label>
        <input type="date" id="jour" class="w-full p-2 border rounded" />
      </div>

      <div id="champ-mois" class="hidden">
        <label class="block mb-1 text-sm">Mois :</label>
        <input type="month" id="mois" class="w-full p-2 border rounded" />
      </div>

      <div id="champ-periode" class="hidden">
        <label class="block mb-1 text-sm">Du :</label>
        <input type="date" id="debut" class="w-full p-2 border rounded mb-2" />
        <label class="block mb-1 text-sm">Au :</label>
        <input type="date" id="fin" class="w-full p-2 border rounded" />
      </div>

      <button type="submit" class="mt-4 w-full bg-[#c3831e] text-white font-bold py-2 rounded hover:bg-yellow-700">
        Afficher le point
      </button>
    </form>

    <!-- Résultats -->
    <div id="resultat" class="bg-white p-4 rounded-xl shadow hidden space-y-4">
      <h2 id="periode-titre" class="text-xl font-bold text-[#c3831e]"></h2>
      <div class="text-gray-800 space-y-1">
        <p><span class="font-bold">Commandes :</span> <span id="total-commandes"></span> FCFA</p>
        <p><span class="font-bold">Momo :</span> <span id="total-momo"></span> FCFA</p>
        <p><span class="font-bold">Espèces :</span> <span id="total-espece"></span> FCFA</p>
        <p><span class="font-bold">Dépenses :</span> <span id="total-depenses"></span> FCFA</p>
        <p class="font-bold text-lg text-green-700">Caisse finale : <span id="total-caisse"></span> FCFA</p>
      </div>
    </div>
  </main>

  <script>
    // Affichage dynamique des champs
const filtreSelect = document.getElementById('filtre');
const champJour = document.getElementById('champ-jour');
const champMois = document.getElementById('champ-mois');
const champPeriode = document.getElementById('champ-periode');
const resultat = document.getElementById('resultat');
const periodeTitle = document.getElementById('periode-titre');

// Éléments d'affichage des résultats
const elemTotalCommandes = document.getElementById('total-commandes');
const elemTotalMomo = document.getElementById('total-momo');
const elemTotalEspece = document.getElementById('total-espece');
const elemTotalDepenses = document.getElementById('total-depenses');
const elemTotalCaisse = document.getElementById('total-caisse');

// Initialiser la date du jour
const today = new Date().toISOString().split('T')[0];
document.getElementById('jour').value = today;

// Initialiser le mois actuel
const currentMonth = new Date().toISOString().split('T')[0].substring(0, 7);
document.getElementById('mois').value = currentMonth;

// Initialiser les dates pour la période (par défaut, le mois en cours)
const firstDay = new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0];
const lastDay = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).toISOString().split('T')[0];
document.getElementById('debut').value = firstDay;
document.getElementById('fin').value = lastDay;

filtreSelect.addEventListener('change', () => {
  champJour.classList.add('hidden');
  champMois.classList.add('hidden');
  champPeriode.classList.add('hidden');

  if (filtreSelect.value === 'jour') champJour.classList.remove('hidden');
  if (filtreSelect.value === 'mois') champMois.classList.remove('hidden');
  if (filtreSelect.value === 'periode') champPeriode.classList.remove('hidden');
});

// Fonction pour formater les nombres en FCFA
function formatMoney(amount) {
  return amount.toLocaleString('fr-FR') + ' FCFA';
}

// Fonction pour récupérer les données depuis l'API
async function fetchStats(type, params) {
  try {
    // Récupérer les statistiques des commandes
    const orderResponse = await fetch(`/api/order-stats-date-proxy?${params}`);
    const orderData = await orderResponse.json();
    
    // Récupérer les statistiques des achats
    const purchaseResponse = await fetch(`/api/purchase-stats-date-proxy?${params}`);
    const purchaseData = await purchaseResponse.json();

    if (orderData.success && purchaseData.success) {
      // Extraire les valeurs
      const valTotalEspeces = orderData.data.total_especes || 0;
      const valTotalMomo = orderData.data.total_momo || 0;
      const valTotalCommandes = valTotalEspeces + valTotalMomo;
      const valTotalDepenses = purchaseData.data.total_achats || 0;
      const valCaisseFinal = valTotalCommandes - valTotalDepenses;

      // Mettre à jour l'interface
      elemTotalCommandes.textContent = formatMoney(valTotalCommandes);
      elemTotalMomo.textContent = formatMoney(valTotalMomo);
      elemTotalEspece.textContent = formatMoney(valTotalEspeces);
      elemTotalDepenses.textContent = formatMoney(valTotalDepenses);
      elemTotalCaisse.textContent = formatMoney(valCaisseFinal);

      // Afficher les résultats
      resultat.classList.remove('hidden');
      
      // Déterminer le titre approprié
      if (type === 'jour') {
        const date = new Date(document.getElementById('jour').value);
        periodeTitle.textContent = `Point du ${date.toLocaleDateString('fr-FR')}`;
      } else if (type === 'mois') {
        const monthValue = document.getElementById('mois').value;
        const monthDate = new Date(monthValue + '-01');
        periodeTitle.textContent = `Point du mois de ${monthDate.toLocaleDateString('fr-FR', { month: 'long', year: 'numeric' })}`;
      } else if (type === 'periode') {
        const dateDebut = new Date(document.getElementById('debut').value);
        const dateFin = new Date(document.getElementById('fin').value);
        periodeTitle.textContent = `Point du ${dateDebut.toLocaleDateString('fr-FR')} au ${dateFin.toLocaleDateString('fr-FR')}`;
      }
    } else {
      alert("Erreur lors de la récupération des données");
      console.error("Erreur:", orderData.message || purchaseData.message);
    }
  } catch (error) {
    console.error("Erreur:", error);
    alert("Erreur de connexion au serveur");
  }
}

// Traitement du formulaire
document.getElementById('filtre-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const filtreType = filtreSelect.value;
  let params = '';

  // Construire les paramètres selon le type de filtre
  if (filtreType === 'jour') {
    const dateValue = document.getElementById('jour').value;
    params = `type=jour&date=${dateValue}`;
  } else if (filtreType === 'mois') {
    const monthValue = document.getElementById('mois').value;
    params = `type=mois&month=${monthValue}`;
  } else if (filtreType === 'periode') {
    const startDate = document.getElementById('debut').value;
    const endDate = document.getElementById('fin').value;
    params = `type=periode&start=${startDate}&end=${endDate}`;
  }

  // Appeler l'API
  await fetchStats(filtreType, params);
});

// Initialisation : afficher champ "jour" par défaut
filtreSelect.dispatchEvent(new Event('change'));
  </script>

</body>
</html>